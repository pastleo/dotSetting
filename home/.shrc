# vim: set ft=sh:
# PastLeo's shared rc for bash/zsh

# -----------------------------
# Restore PATH if TMUX_PATH
# to prevent tmux or system shell reset PATH
# see TMUX_PATH in .tmux.conf
# -----------------------------

if [ "$TMUX_PATH" ]; then
  export PATH=$TMUX_PATH
fi

# NOTICE ====
# each session source until here, as environment will be inherited
# a restart of whole tmux (closing all tmux session) is needed to reset
# ===========
if [ -z "$SHRC_SOURCED" ]; then
  source "$HOME/.shrc.once"
fi
export SHRC_SOURCED=true

# -----------------------------
# Required by each session
# -----------------------------

# asdf-vm
if command -v asdf 2>&1 >/dev/null; then
  export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
fi

# -----------------------------
# Host's specific rc
# -----------------------------

if [ "$SHRC_LOCAL_EXISTS" ]; then
  source "$HOME/.shrc.local"
fi

# template of ~/.shrc.local:
#
# ```
# # vim: set ft=sh:
#
# if [ -z "$SHRC_LOCAL_SOURCED" ]; then
#   export SHRC_LOCAL_SOURCED=true
#
#   # local rc that only runs on top level of terminal
# fi
#
# # local rc that only runs on every shell
# ```
#
# example for ssh-agent:
#
# ```
# # vim: set ft=sh:
#
# if [ -z "$SHRC_LOCAL_SOURCED" ]; then
#   export SHRC_LOCAL_SOURCED=true
#
#   eval $(ssh-agent)
#   ssh-add
# fi
# ```
#
# example for gpg-agent as ssh agent:
#
# ```
# # vim: set ft=sh:
#
# if [ -z "$SHRC_LOCAL_SOURCED" ]; then
#   export SHRC_LOCAL_SOURCED=true
#
#   export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
#   gpgconf --launch gpg-agent
#   gpg-connect-agent updatestartuptty /bye > /dev/null
# fi
#
# GPG_TTY=$(tty) # for pinentry-tty
# ```

# -----------------------------
# Session startup & report
# -----------------------------

shrc_session_start_report() {
  if [ -n "$_HOST" ]; then
    hostname_info="\033[1;34m$_HOST\033[0m"
  else
    hostname_info="\033[1;31m(unknown)\033[0m"
  fi

  echo -e "PID: \033[1;32m$$\033[0m | HOST: $hostname_info | \033[1;36m$(date '+%Y/%m/%d %A %H:%M %Z (%z)')\033[0m"
}
